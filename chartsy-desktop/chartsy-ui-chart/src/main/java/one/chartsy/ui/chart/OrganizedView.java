/* Copyright 2022 Mariusz Bernacki <consulting@didalgo.com>
 * SPDX-License-Identifier: Apache-2.0 */
package one.chartsy.ui.chart;

import java.awt.AWTEvent;
import java.util.Deque;
import java.util.LinkedList;

import one.chartsy.core.event.ListenerList;

/**
 * 
 * 
 * @author Mariusz Bernacki
 *
 */
public abstract class OrganizedView {
    /** The stack of interactors. */
    private final Deque<OrganizedViewInteractor> interactorStack = new LinkedList<>();
    /** The list of registered interactor listeners. */
    private final ListenerList<InteractorListener> interactorListeners = ListenerList.of(InteractorListener.class);
    
    
    public OrganizedViewInteractor getInteractor() {
        return interactorStack.peek();
    }
    
    public void addInteractorListener(InteractorListener listener) {
        interactorListeners.addListener(listener);
    }
    
    public void removeInteractorListener(InteractorListener listener) {
        interactorListeners.removeListener(listener);
    }
    
    /**
     * Adds the specified {@code interactor} to the top of the interactor stack.
     * <p>
     * The added interactor becomes active for the view and will receive all
     * further events generated by this view. All other indicators that are not
     * on the top of the interactor stack no longer receive events.
     * <p>
     * An {@link InteractorChangeEvent} is sent to all interactor listeners
     * registered with {@link #addInteractorListener(InteractorListener)}
     * method.
     * 
     * @param interactor
     *            the new interactor to become active, if {@code null} the
     *            operation is ignored and no error is raised
     */
    public void pushInteractor(OrganizedViewInteractor interactor) {
        OrganizedViewInteractor oldInteractor = getInteractor();
        interactor.attach(this);
        interactorStack.push(interactor);
        
        // Send the InteractorChangeEvent if anyone listens
        if (!interactorListeners.isEmpty()) {
            InteractorChangeEvent e = new InteractorChangeEvent(this, oldInteractor, getInteractor());
            interactorListeners.fire().interactorChanged(e);
        }
    }
    
    public void pushInteractor(OrganizedViewInteractor interactor, AWTEvent event) {
        pushInteractor(interactor);
        interactor.processEvent(event);
    }
    
    /**
     * Removes an interactor from the top of the interactor stack.
     * <p>
     * The removed interactor is no longer active and will not receive further
     * events from this view. The interactor that was just below in the
     * interactor stack (if any) becomes active.
     * <p>
     * An {@link InteractorChangeEvent} is sent to all interactor listeners
     * registered with {@link #addInteractorListener(InteractorListener)}
     * method.
     * 
     * @return the removed interator, or {@code null} if the interactor stack
     *         was empty
     */
    public OrganizedViewInteractor popInteractor() {
        OrganizedViewInteractor oldInteractor = interactorStack.poll();
        oldInteractor.detach();
        
        // Send the InteractorChangeEvent if anyone listens
        if (!interactorListeners.isEmpty()) {
            InteractorChangeEvent e = new InteractorChangeEvent(this, oldInteractor, getInteractor());
            interactorListeners.fire().interactorChanged(e);
        }
        return oldInteractor;
    }
    
    /**
     * Returns the coordinate system of this view.
     * <p>
     * The organized view has its own coordinate system that defines how graphic
     * objects contained by in the organizer are displayed on the screen.
     * 
     * @return the coordinate system of this view
     */
    public abstract CoordinateSystem getCoordinateSystem();
    
}
